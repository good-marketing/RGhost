library(RGhost)
library(RGhost)
RGhost::authenticate_ghost()
packrat::set_opts(external.packages = c("httr"))
install.packages("packrat")
RGhost::authenticate_ghost()
RGhost::authenticate_ghost()
RGhost::authenticate_ghost()
packrat::set_opts(vcs.ignore.src = TRUE, use.cache = TRUE)
packrat::disable()
library(RGhost)
RGhost::authenticate_ghost()
RGhost::authenticate_ghost()
library(RGhost)
RGhost::authenticate_ghost()
library(RGhost)
RGhost::authenticate_ghost()
library(RGhost)
library(RGhost)
RGhost::authenticate_ghost()
library(RGhost)
RGhost::authenticate_ghost()
library(RGhost)
RGhost::authenticate_ghost()
library(RGhost)
library(RGhost)
mylist.names <- c("a", "b", "c")
mylist <- vector("list", length(mylist.names))
names(mylist) <- mylist.names
return_response.names <- c("message", "status", "return_content")
return_response <- vector("list", length(return_response.names))
names(return_response) <- return_response.names
return_response['message']="testing"
return_response['status']=0
return_response[2]
return_response$status
return_response$message
return_response$status = 1
return_response$status <- 1
return_response$status <- 20
library(RGhost)
RGhost::authenticate_ghost()
Ghost <- POST("http://good-marketing.org/ghost/api/v0.1/authentication/token",
encode="form",
body = list(grant_type = "password",
username =   "bob@good-marketing.org",
password =  "GoodMarketing14",
client_id = "ghost-admin"
),
add_headers(
"Content-Type" = "application/x-www-form-urlencoded",
"Content-Length" = "100",
"Referer" = "http://good-marketing.org/ghost/signin/",
"X-Requested-With" = "XMLHttpRequest",
"Accept" ="application/json, text/javascript, */*; q=0.01",
"User-Agent"="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36"),verbose()
)
http_status(Ghost)
http_status(Ghost)$message
content(Ghost)$meta
content(Ghost)
Ghost
Ghost$Status
Ghost$Response
Ghost$status_code
library(RGhost)
RGhost::authenticate_ghost()
library(RGhost)
RGhost::authenticate_ghost()
test <- RGhost::authenticate_ghost()
if(test$status){'Yes True'}
library(RGhost)
test <- RGhost::authenticate_ghost()
test <- RGhost::authenticate_ghost()
library(RGhost)
test <- RGhost::authenticate_ghost()
access_token
(access_token, envir=cacheEnv)
(access_token, envir=cacheEnv)
assign(access_token, envir=cacheEnv)
cacheEnv
GhostR:::cacheEnv
RGhost:::cacheEnv
get("access_token", envir=myNewEnv)
get("access_token", envir=cacheEnv)
library(RGhost)
test <- RGhost::authenticate_ghost()
library(RGhost)
test <- RGhost::authenticate_ghost()
cacheEnv <- new.env()
assign("access_token",NULL, envir=cacheEnv")
assign("access_token",NULL, envir="cacheEnv")
cacheEnv <- new.env()
access_token <- NULL
assign(access_token,NULL, envir=cacheEnv)
cacheEnv <- new.env()
access_token <- NULL
assign(access_token,NULL, envir=cacheEnv)
access_token <- "No value"
assign(access_token,NULL, envir=cacheEnv)
Rghost:::cacheEnv
RGhost:::cacheEnv
RGhost:::cacheEnv
RGhost:::cacheEnv(access_token)
get("access_token",envir=cacheEnv)
assign(access_token,NULL, envir=cacheEnv)
get("access_token",envir=cacheEnv)
cacheEnv <- new.env()
access_token <- "No value"
assign(access_token,"Different Value", envir=cacheEnv)
get("access_token",envir=cacheEnv)
cacheEnv <- new.env()
access_token <- "No values"
get("access_token",envir=cacheEnv)
RGhost:::cacheEnv
RGhost:::cacheEnv::access_token
RGhost:::cacheEn
cacheEnv <- new.env()
access_token <- "not_set"
get("access_token",envir=cacheEnv)
library(RGhost)
get("access_token",envir=cacheEnv)
RGhost::authenticate_ghost()
library(RGhost)
RGhost::authenticate_ghost()
if (get(access_token, envir=cacheEnv)  != "not_set"){
return(get("access_token", envir=cacheEnv))
}
if (exists(access_token, envir=cacheEnv)){
return(get("access_token", envir=cacheEnv))
}
cacheEnv <- new.env()
if (exists(access_token, envir=cacheEnv)){
return(get("access_token", envir=cacheEnv))
}
library(RGhost)
RGhost::authenticate_ghost()
RGhost::authenticate_ghost()
library(RGhost)
RGhost::authenticate_ghost()
RGhost::authenticate_ghost()
RGhost:::cacheEnv
RGhost:::cacheEnv$access_token
RGhost:::cacheEnv
RGhost::authenticate_ghost()
RGhost:::cacheEnv
RGhost:::cacheEnv
cacheEnv <- new.env()
RGhost:::cacheEnv
library(RGhost)
RGhost:::cacheEnv
get(access_token,envir=cacheEnv)
source('~/Documents/RPROJECTS/RGhost/R/init_cache.R')
get(access_token,envir=cacheEnv)
RGhost::autenticate_ghost()
RGhost::authenticate_ghost()
get(access_token,envir=cacheEnv)
remove(access_token,envir = cacheEnv)
get(access_token,envir=cacheEnv)
source('~/Documents/RPROJECTS/RGhost/R/init_cache.R')
library(RGhost)
RGhost::authenticate_ghost()
get(access_token,envir=cacheEnv)
get(access_token,envir=cacheGhost)
source('~/Documents/RPROJECTS/RGhost/R/init_cache.R')
access_token
remove(access_token)
access_token
source('~/Documents/RPROJECTS/RGhost/R/init_cache.R')
source('~/Documents/RPROJECTS/RGhost/R/init_cache.R')
library(RGhost)
get(access_token,envir=cacheEnv)
RGhost::authenticate_ghost()
assign("a", 999, envir=cacheGhost)
a
999
999a
a
get(a,envir=cacheGhost)
cacheGhost$a
cacheGhost$a
exists(access_token, envir=cacheGhost)
exists(a, envir=cacheGhost)
exists(a,envir=cacheGhost)
if(exists(access_token, envir=cacheGhost))
{e}
exists(cacheGhost$a)
cacheGhost$a
exists(cacheGhost$a)
source('~/Documents/RPROJECTS/RGhost/R/init_cache.R')
access_token <- NULL
cacheGhost <- new.env()
access_token
library(RGhost)
cacheGhost$a
cacheGhost$access_token
RGhost::autenticate_ghost()
RGhost::authenticate_ghost()
get(access_token, envir=cacheGhost)
get(access_token, envir=cacheGhost)get(access_token, envir=cacheGhost)
source('~/Documents/RPROJECTS/RGhost/R/init_cache.R')
access_token <- "not_set_again"
cacheGhost <- new.env()
library(RGhost)
RGhost::authenticate_ghost()
source('~/Documents/RPROJECTS/RGhost/R/init_cache.R')
library(RGhost)
RGhost::authenticate_ghost()
access_token <- paste("not_set_again",sep="")
cacheGhost <- new.env()
cacheGhost
cacheGhost$access_token
cacheGhost
library(RGhost)
shiny::runApp('~/Documents/RPROJECTS/GhostR/inst/app')
library("editR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
editR('template.Rmd')
shiny::runApp()
shiny::runApp()
library(RGhost)
shiny::runApp()
library(RGhost)
shiny::runApp('~/Documents/RPROJECTS/GhostR/inst/app')
library(RGhost)
shiny::runApp()
library(RGhost)
shiny::runApp()
library(RGhost)
library(RGhost)
shiny::runApp()
